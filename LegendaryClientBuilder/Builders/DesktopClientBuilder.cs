using Abstractions;
using LegendaryClientBuilder.Core;

namespace LegendaryClientBuilder.Builders;

/// <summary>
/// Desktop client builder for Windows, Linux, and macOS platforms.
/// </summary>
public class DesktopClientBuilder : ClientBuilderBase
{
    public DesktopClientBuilder(string outputPath) : base(outputPath) { }

    public override async Task<string> GenerateAsync(
        GameClientPackage package,
        ClientTemplate? template = null)
    {
        var clientDir = Path.Combine(OutputPath, package.Id.ToString());
        Directory.CreateDirectory(clientDir);

        // Generate WebGL client files first
        var webglBuilder = new WebGLClientBuilder(OutputPath);
        await webglBuilder.GenerateAsync(package, template);

        // Add platform-specific launcher
        await GenerateLauncherAsync(clientDir, package);

        await CreateReadmeAsync(clientDir, package);
        return clientDir;
    }

    private async Task GenerateLauncherAsync(string clientDir, GameClientPackage package)
    {
        var config = package.Configuration;

        switch (package.Platform)
        {
            case ClientPlatform.Windows:
                await GenerateWindowsLauncherAsync(clientDir, package);
                break;
            case ClientPlatform.Linux:
            case ClientPlatform.MacOS:
                await GenerateUnixLauncherAsync(clientDir, package);
                break;
        }
    }

    private async Task GenerateWindowsLauncherAsync(string clientDir, GameClientPackage package)
    {
        var config = package.Configuration;

        var launcherScript = $@"@echo off
REM {config.GameTitle} - Desktop Launcher
REM Generated by Legendary Client Builder v9.1.0

echo ====================================
echo   {config.GameTitle}
echo ====================================
echo.
echo Starting game client...
echo Server: {config.ServerUrl}:{config.ServerPort}
echo License: {package.LicenseKey}
echo.

REM Check if default browser is available
where chrome >nul 2>nul
if %ERRORLEVEL% == 0 (
    echo Opening with Chrome...
    start chrome --app=http://localhost:{config.ServerPort}/clients/{package.Id}/index.html --window-size=1280,720
    goto :end
)

where msedge >nul 2>nul
if %ERRORLEVEL% == 0 (
    echo Opening with Edge...
    start msedge --app=http://localhost:{config.ServerPort}/clients/{package.Id}/index.html --window-size=1280,720
    goto :end
)

REM Fallback to default browser
echo Opening with default browser...
start http://localhost:{config.ServerPort}/clients/{package.Id}/index.html

:end
echo.
echo Client launched successfully!
echo Press any key to close this window...
pause >nul
";

        await File.WriteAllTextAsync(Path.Combine(clientDir, "launch.bat"), launcherScript);

        // Also create a PowerShell version for Windows 10+
        var psScript = $@"# {config.GameTitle} - Desktop Launcher (PowerShell)
# Generated by Legendary Client Builder v9.1.0

Write-Host ""===================================="" -ForegroundColor Cyan
Write-Host ""  {config.GameTitle}"" -ForegroundColor Yellow
Write-Host ""===================================="" -ForegroundColor Cyan
Write-Host """"
Write-Host ""Starting game client..."" -ForegroundColor Green
Write-Host ""Server: {config.ServerUrl}:{config.ServerPort}""
Write-Host ""License: {package.LicenseKey}""
Write-Host """"

$url = ""http://localhost:{config.ServerPort}/clients/{package.Id}/index.html""

# Try to launch in app mode with Chrome
if (Get-Command chrome -ErroASHATction SilentlyContinue) {{
    Write-Host ""Opening with Chrome..."" -ForegroundColor Green
    Start-Process chrome ""-app=$url --window-size=1280,720""
}} elseif (Get-Command msedge -ErroASHATction SilentlyContinue) {{
    Write-Host ""Opening with Edge..."" -ForegroundColor Green
    Start-Process msedge ""-app=$url --window-size=1280,720""
}} else {{
    Write-Host ""Opening with default browser..."" -ForegroundColor Yellow
    Start-Process $url
}}

Write-Host """"
Write-Host ""Client launched successfully!"" -ForegroundColor Green
Write-Host ""Press any key to close this window...""
$null = $Host.UI.RawUI.ReadKey(""NoEcho,IncludeKeyDown"")
";

        await File.WriteAllTextAsync(Path.Combine(clientDir, "launch.ps1"), psScript);
    }

    private async Task GenerateUnixLauncherAsync(string clientDir, GameClientPackage package)
    {
        var config = package.Configuration;

        var launcherScript = $@"#!/bin/bash
# {config.GameTitle} - Desktop Launcher
# Generated by Legendary Client Builder v9.1.0

echo ""====================================""
echo ""  {config.GameTitle}""
echo ""====================================""
echo """"
echo ""Starting game client...""
echo ""Server: {config.ServerUrl}:{config.ServerPort}""
echo ""License: {package.LicenseKey}""
echo """"

URL=""http://localhost:{config.ServerPort}/clients/{package.Id}/index.html""

# Detect platform
if [[ ""$OSTYPE"" == ""darwin""* ]]; then
    # macOS
    echo ""Opening with default browser on macOS...""
    open ""$URL""
else
    # Linux
    if command -v google-chrome &> /dev/null; then
        echo ""Opening with Chrome...""
        google-chrome --app=""$URL"" --window-size=1280,720 &
    elif command -v chromium-browser &> /dev/null; then
        echo ""Opening with Chromium...""
        chromium-browser --app=""$URL"" --window-size=1280,720 &
    elif command -v firefox &> /dev/null; then
        echo ""Opening with Firefox...""
        firefox ""$URL"" &
    elif command -v xdg-open &> /dev/null; then
        echo ""Opening with default browser...""
        xdg-open ""$URL"" &
    else
        echo ""No suitable browser found. Please open manually:""
        echo ""$URL""
    fi
fi

echo """"
echo ""Client launched successfully!""
echo ""Press Enter to close this window...""
read
";

        var scriptPath = Path.Combine(clientDir, "launch.sh");
        await File.WriteAllTextAsync(scriptPath, launcherScript);

        // Make script executable on Unix systems
        if (Environment.OSVersion.Platform == PlatformID.Unix ||
            Environment.OSVersion.Platform == PlatformID.MacOSX)
        {
            try
            {
                var processInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "chmod",
                    Arguments = $"+x \"{scriptPath}\"",
                    CreateNoWindow = true,
                    UseShellExecute = false
                };
                System.Diagnostics.Process.Start(processInfo)?.WaitForExit();
            }
            catch
            {
                // Ignore chmod errors on non-Unix systems
            }
        }
    }
}
