name: Security Scan & CI

on:
  push:
    branches: [ main, 'release/*', 'copilot/*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scan on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Detect solution file
      run: |
        set -euo pipefail
        mapfile -t slns < <(git ls-files '*.sln')
        if [ ${#slns[@]} -eq 0 ]; then
          echo "::error::No .sln file found. Add a solution or hardcode your project path in the workflow."
          exit 1
        elif [ ${#slns[@]} -gt 1 ]; then
          echo "::error::Multiple .sln files found:"
          printf ' - %s\n' "${slns[@]}"
          echo "::error::Set SOLUTION_FILE explicitly in the workflow to disambiguate."
          exit 1
        fi
        echo "SOLUTION_FILE=${slns[0]}" >> "$GITHUB_ENV"
        echo "Using solution: ${slns[0]}"

    - name: Restore dependencies
      run: dotnet restore "$SOLUTION_FILE"
    
    - name: Build
      run: dotnet build "$SOLUTION_FILE" --no-restore --configuration Release
    
    - name: Run tests
      run: |
        if [ -f "run-private-alpha-tests.sh" ]; then
          chmod +x run-private-alpha-tests.sh
          ./run-private-alpha-tests.sh || echo "Tests completed with issues - review required"
        else
          dotnet test "$SOLUTION_FILE" --no-build --configuration Release --verbosity normal
        fi

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Detect solution file
      run: |
        set -euo pipefail
        mapfile -t slns < <(git ls-files '*.sln')
        if [ ${#slns[@]} -eq 0 ]; then
          echo "::error::No .sln file found. Add a solution or hardcode your project path in the workflow."
          exit 1
        elif [ ${#slns[@]} -gt 1 ]; then
          echo "::error::Multiple .sln files found:"
          printf ' - %s\n' "${slns[@]}"
          echo "::error::Set SOLUTION_FILE explicitly in the workflow to disambiguate."
          exit 1
        fi
        echo "SOLUTION_FILE=${slns[0]}" >> "$GITHUB_ENV"
        echo "Using solution: ${slns[0]}"

    - name: Restore dependencies
      run: dotnet restore "$SOLUTION_FILE"
    
    - name: Check for vulnerable packages
      run: |
        echo "Scanning for vulnerable NuGet packages..."
        dotnet list "$SOLUTION_FILE" package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
        
        if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
          echo "::warning::Vulnerable packages detected! Review vulnerability-report.txt"
          echo "::warning::This is informational only - will not fail the build"
        else
          echo "âœ… No vulnerable packages detected"
        fi
    
    - name: List all packages
      run: |
        echo "Current package versions:"
        dotnet list "$SOLUTION_FILE" package --include-transitive
    
    - name: Upload vulnerability report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: vulnerability-report.txt
        retention-days: 30

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-and-quality
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for secret scanning
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional: for enterprise features

  security-audit:
    name: Security Audit Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, dependency-scan, codeql-analysis, secret-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate Security Report
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Job Status" >> security-summary.md
        echo "- Build & Test: ${{ needs.build-and-test.result }}" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "- Review security alerts in GitHub Security tab" >> security-summary.md
        echo "- Update vulnerable dependencies if any found" >> security-summary.md
        echo "- Address any CodeQL findings" >> security-summary.md
        echo "- Rotate any exposed secrets immediately" >> security-summary.md
        
        cat security-summary.md
    
    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90
    
    - name: Check for failures
      if: |
        needs.build-and-test.result == 'failure' ||
        needs.dependency-scan.result == 'failure' ||
        needs.codeql-analysis.result == 'failure' ||
        needs.secret-scan.result == 'failure'
      run: |
        echo "::error::One or more security checks failed. Review the job outputs above."
        exit 1
