#!/bin/bash
# RaOS Nginx Management Setup Script for Ubuntu Linux
# 
# This script configures Ubuntu to allow RaOS to manage Nginx without requiring
# manual sudo password entry at the terminal. This is safe because it only grants
# specific, restricted permissions for Nginx service management.
#
# Usage:
#   sudo ./setup-nginx-permissions.sh [username]
#
# If username is not provided, it defaults to 'racore'

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default user
RAOS_USER="${1:-racore}"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  RaOS Nginx Management Setup${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo -e "${RED}Error: This script must be run as root or with sudo${NC}"
    echo "Usage: sudo $0 [username]"
    exit 1
fi

# Check if user exists
if ! id "$RAOS_USER" &>/dev/null; then
    echo -e "${RED}Error: User '$RAOS_USER' does not exist${NC}"
    echo "Please create the user first or specify an existing user:"
    echo "  sudo adduser $RAOS_USER"
    exit 1
fi

echo -e "${GREEN}✓${NC} User '$RAOS_USER' found"

# Check if Nginx is installed
if ! command -v nginx &> /dev/null; then
    echo -e "${YELLOW}Warning: Nginx is not installed${NC}"
    echo "You can install it with: sudo apt install nginx"
    read -p "Do you want to continue anyway? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo -e "${GREEN}✓${NC} Nginx is installed"
fi

# Check if systemctl is available
if ! command -v systemctl &> /dev/null; then
    echo -e "${RED}Error: systemctl not found. This script requires systemd.${NC}"
    exit 1
fi

echo -e "${GREEN}✓${NC} systemctl is available"

# Create sudoers configuration file
SUDOERS_FILE="/etc/sudoers.d/raos-nginx"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SOURCE_FILE="$SCRIPT_DIR/ubuntu-nginx-sudoers"

echo ""
echo "Creating sudoers configuration..."

if [ -f "$SOURCE_FILE" ]; then
    # Use the template file and replace the username
    sed "s/racore/$RAOS_USER/g" "$SOURCE_FILE" > "$SUDOERS_FILE.tmp"
else
    # Create the configuration from scratch
    cat > "$SUDOERS_FILE.tmp" << EOF
# Sudoers configuration for RaOS Nginx Management
# This file allows the RaOS user to manage Nginx without requiring a password
# Auto-generated by setup-nginx-permissions.sh

# Allow $RAOS_USER user to manage Nginx service without password
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/bin/systemctl start nginx
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/bin/systemctl stop nginx
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart nginx
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/bin/systemctl reload nginx
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/bin/systemctl status nginx

# Allow $RAOS_USER user to test Nginx configuration
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/sbin/nginx -t
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/bin/nginx -t

# Legacy service command support (older systems)
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/sbin/service nginx start
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/sbin/service nginx stop
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/sbin/service nginx restart
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/sbin/service nginx reload
$RAOS_USER ALL=(ALL) NOPASSWD: /usr/sbin/service nginx status
EOF
fi

# Validate sudoers file syntax
if visudo -c -f "$SUDOERS_FILE.tmp" &> /dev/null; then
    # Move to final location with correct permissions
    mv "$SUDOERS_FILE.tmp" "$SUDOERS_FILE"
    chmod 0440 "$SUDOERS_FILE"
    echo -e "${GREEN}✓${NC} Sudoers configuration created: $SUDOERS_FILE"
else
    rm -f "$SUDOERS_FILE.tmp"
    echo -e "${RED}Error: Generated sudoers file has syntax errors${NC}"
    exit 1
fi

# Test the configuration
echo ""
echo "Testing configuration..."

# Test as the target user
if sudo -u "$RAOS_USER" sudo -n systemctl status nginx &> /dev/null; then
    echo -e "${GREEN}✓${NC} Configuration test successful!"
else
    echo -e "${YELLOW}Warning: Could not test configuration${NC}"
    echo "This might be normal if Nginx is not running yet."
fi

# Display success message
echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}  Setup Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "User '$RAOS_USER' can now manage Nginx without password prompts."
echo ""
echo "The following commands can be run without sudo password:"
echo "  - sudo systemctl start nginx"
echo "  - sudo systemctl stop nginx"
echo "  - sudo systemctl restart nginx"
echo "  - sudo systemctl reload nginx"
echo "  - sudo systemctl status nginx"
echo "  - sudo nginx -t"
echo ""
echo "RaOS will now be able to manage Nginx automatically through its API."
echo ""
echo -e "${BLUE}Note: This only grants permission for Nginx management.${NC}"
echo -e "${BLUE}All other sudo commands will still require a password.${NC}"
echo ""

# Offer to test
echo "Would you like to test Nginx management now?"
read -p "Test 'sudo systemctl status nginx' as $RAOS_USER? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    echo "Testing as user '$RAOS_USER'..."
    sudo -u "$RAOS_USER" sudo systemctl status nginx || true
fi

echo ""
echo -e "${GREEN}Setup complete!${NC}"
